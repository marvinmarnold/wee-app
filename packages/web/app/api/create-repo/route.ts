import { NextResponse } from 'next/server';

export async function POST(request: Request) {
    const { GITHUB_TOKEN, GITHUB_USERNAME } = process.env;

    if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
        return NextResponse.json(
            { error: 'GitHub token or username not configured.' },
            { status: 500 }
        );
    }

    // We'll get the desired repo name from the request body later
    // For now, let's generate one
    const repoName = `miniapp-${Date.now()}`;

    try {
        const response = await fetch('https://api.github.com/user/repos', {
            method: 'POST',
            headers: {
                Authorization: `token ${GITHUB_TOKEN}`,
                Accept: 'application/vnd.github.v3+json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                name: repoName,
                private: false, // Changed to public repositories
                description: 'A new miniapp generated by WeeApp',
            }),
        });

        if (!response.ok) {
            const errorData = await response.json();
            console.error('GitHub API Error:', errorData);
            return NextResponse.json(
                { error: `Failed to create GitHub repository: ${errorData.message || response.statusText}` },
                { status: response.status }
            );
        }

        const repoData = await response.json();

        return NextResponse.json({
            message: 'Repository created successfully!',
            repoName: repoData.name,
            repoUrl: repoData.html_url,
            sshUrl: repoData.ssh_url,
            cloneUrl: repoData.clone_url,
        });

    } catch (error: any) {
        console.error('Error creating GitHub repository:', error);
        return NextResponse.json(
            { error: `Error creating GitHub repository: ${error.message}` },
            { status: 500 }
        );
    }
} 